#+TITLE: SMUG : Super Monadic Über Go-into
#+SETUPFILE: publish-html.org
#+INCLUDE: html-navbar.org


#+HTML: <div id="body" class="container" style="padding-top:65px"><div class="row">
#+HTML: <div class="col-md-9"> 

#+HTML: <p class="lead">

  ~SMUG~ is a library for parsing text, based on _monadic parser
  combinators_ [fn:1]. Using a simple technique from the functional
  programming camp, ~SMUG~ makes it simple to create quick extensible
  recursive descent parsers without funky syntax or impenetrable
  macrology.
 
#+HTML: </p> 
#+HTML: </div> 

#+HTML: <nav id="toc-nav" class="col-md-3 hidden-xs hidden-sm"
#+HTML:       style="float:right">
#+TOC: headlines 2   
#+HTML: </nav> <div class="col-md-9">

* Features
  :PROPERTIES:
  :CUSTOM_ID: Features
  :END:

  - parsers are first class values written in basic lisp
  - non-deterministic infinite look-ahead  
  - easy to learn, easy to use
  - extensible input protocol : parse strings, streams, lists etc
  - in-depth tutorial : no previous experience required.

* Download and Install
  :PROPERTIES:
  :CUSTOM_ID: Install
  :END:


#+BEGIN_SRC lisp
  (asdf:load-system :smug)
#+END_SRC

#+RESULTS:
: T

* Tutorial and Technical Report

There is an extensive [[file:tutorial.org][Tutorial]] available that starts from
scratch and literately implements ~smug~ itself. 

If that is not enough, the paper that ~smug~ is based on, [[file:monparsing.org][Monadic
Parser Combinators]], has been updated with Common Lisp code. This is a
*Work In Progress* and does not yet reflect the source code of ~smug~
itself.

* Example : Parsing S-Expressions

#+INCLUDE: parse/sexp.org

* Source Code 

** ~smug.lisp~

#+BEGIN_SRC emacs-lisp
  (require 'org-id)
  (org-babel-lob-ingest "tutorial.org")
#+END_SRC    

#+BEGIN_SRC lisp :noweb yes :tangle "../smug.lisp" :padline no
  (defpackage :smug/smug
    (:nicknames :smug)
    (:use :cl)
    (:export 
     #:.identity
     #:.fail
     #:.item
     #:.bind
     
     #:input-empty-p
     #:input-first
     #:input-rest
     #:run
     #:parse  
     #:.plus
     #:.or
     #:.not
     #:.let*
     #:.map
     #:.concatenate
     #:.is
     #:.is-not
     #:.char=
     #:.char-equal
     #:.string-equal
     #:.string=
     #:.progn
     #:.prog1
     #:.prog2
     #:.and
     #:.or
     #:.not
     #:.first
     #:.optional
     #:.read-line))
  (in-package :smug/smug) 
  
  <<tutorial_.letstar>>

  <<tutorial_run>>
  
  <<tutorial_parse>>
  
  <<tutorial_.fail>>
  
  <<tutorial_.plus>>
  
  <<tutorial_.identity>>
  
  <<tutorial_.bind>>
  
  <<tutorial_.or>>
  
  <<tutorial_.not>>
  
  <<tutorial_reading-input>>
  
  <<tutorial_.item>>
  
  <<tutorial-source>>
  
  <<tutorial_.list-of>>
  
  <<tutorial_.satisfies>>
  
  <<tutorial_.optional>>
  
  <<tutorial_.and>>
  
  <<tutorial_.progn>>
  
  <<tutorial_.is-not>>
  
  <<tutorial_.is>>
  
  <<tutorial-.mapcar>>
  
  <<tutorial-.mapc>>
  
  <<tutorial-.make-list>>
  
  <<tutorial-.concatenate>>
  
  <<tutorial_.map>>
  
  <<tutorial_char=digit-char|lower-case-p>>
  
  <<tutorial-line>>
   
  <<tutorial_.coerce>>
  
  <<tutorial_.string=>>
  
  <<tutorial_.char-equal>>
  
  <<tutorial_.string-equal>>
  
  <<tutorial_.first>>   
#+END_SRC


** COMMENT Tangle 

# https://github.com/fniessen/refcard-org-babel

#+BEGIN_SRC emacs-lisp
  ; (require 'org-babel)

  (org-babel-lob-ingest "~/me/src/smug/doc/tutorial.org")

#+END_SRC

** COMMENT Publish
http://orgmode.org/manual/Complex-example.html#Complex-example
   #+BEGIN_SRC emacs-lisp
     (require 'ox-html)

     (defun drewc:org-html-ignore-title-if-present (string backend info)
       "Strip title if it's already there for html.
     ; from: http://comments.gmane.org/gmane.emacs.orgmode/73014"
       (when (and (org-export-derived-backend-p backend 'html)
                  (string-match "h1 class=\"title\"" string))
         (replace-regexp-in-string "<h1 class=\"title\">.*?</h1>\n+" "" string)))

     (add-to-list 'org-export-filter-final-output-functions
                  'drewc:org-html-ignore-title-if-present)

     (defun drewc:org-html-set-toc-title (string backend info)
       (when (and (org-export-derived-backend-p backend 'html))
         (replace-regexp-in-string "<h2>Table of Contents</h2>" 
                                   "<h2>SMÜG</h2>" string)))

     (add-to-list 'org-export-filter-final-output-functions
                  'drewc:org-html-set-toc-title)

     (require 'org-id)
     (org-babel-lob-ingest "~/me/src/smug/doc/tutorial.org")

     (setf org-babel-use-quick-and-dirty-noweb-expansion t)
     (setf org-publish-project-alist
           '(("smug" 
              :base-directory "~/me/src/smug/doc"
              :recursive t
              :publishing-function org-html-publish-to-html
              :publishing-directory "~/me/src/smug/doc/html")))
#+END_SRC
* footnotes	 

[fn:1] Monadic parser combinators (pdf, ps, bibtex) Graham Hutton and
Erik Meijer. Technical Report NOTTCS-TR-96-4, Department of Computer
Science, University of
Nottingham, 1996.

 -- http://www.cs.nott.ac.uk/~gmh/bib.html#monparsing

[fn:2] http://www.willamette.edu/~fruehr/haskell/seuss.html 

[fn:3] like, say, scheme


